{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\win-7h\\\\Desktop\\\\Scrimba\\\\Meme Generator\\\\01-starting-setup\\\\src\\\\Components\\\\Meme.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport MemesData from \"../MemesData\";\n\n// * Challenge: Update our state to save the meme-related\n// * data as an object called `meme`. It should have the\n// * following 3 properties:\n// * topText, bottomText, randomImage.\n// *\n// * The 2 text states can default to empty strings for now,\n// * amd randomImage should default to \"http://i.imgflip.com/1bij.jpg\"\n// *\n// * Next, create a new state variable called `allMemeImages`\n// * which will default to `memesData`, which we imported above\n// *\n// * Lastly, update the `getMemeImage` function and the markup\n// * to reflect our newly reformed state object and array in the\n// * correct way.\n// */\n\n/**\r\n * Challenge:\r\n * 1. Set up the text inputs to save to\r\n *    the `topText` and `bottomText` state variables.\r\n * 2. Replace the hard-coded text on the image with\r\n *    the text being saved to state.\r\n */\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Meme = () => {\n  _s();\n  const [meme, setMeme] = useState({\n    topText: \"\",\n    bottomText: \"\",\n    randomImage: \"http://i.imgflip.com/1bij.jpg\"\n  });\n  const [allMemeImages, setAllMemeImages] = useState(MemesData);\n\n  // function handleChange(event) {\n  //   const { name, value } = event.target;\n  //   setMeme((prevState) => ({\n  //     ...prevState,\n  //     [name]: value,\n  //   }));\n  // }\n\n  function getMemeImage(event) {\n    const {\n      name,\n      value\n    } = event.target;\n    const memesArray = allMemeImages.data.memes;\n    const randNum = Math.floor(Math.random() * memesArray.length);\n    const url = memesArray[randNum].url;\n    setMeme(prevMeme => ({\n      ...prevMeme,\n      [name]: value,\n      randomImage: url\n    }));\n  }\n  function handleSubmit(event) {\n    event.preventDefault();\n  }\n  return /*#__PURE__*/_jsxDEV(\"main\", {\n    className: \"meme-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"form\", {\n      className: \"form\",\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        name: \"topText\",\n        value: meme.topText,\n        onChange: getMemeImage,\n        placeholder: \"Top text\",\n        className: \"form--input\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        name: \"bottomText\",\n        value: meme.bottomText,\n        onChange: getMemeImage,\n        placeholder: \"Bottom text\",\n        className: \"form--input\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: getMemeImage,\n        className: \"form--button\",\n        children: \"Get a new meme image \\uD83D\\uDDBC\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"meme\",\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        className: \"meme--image\",\n        src: meme.randomImage,\n        alt: \"\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"meme--text top\",\n        children: \"One does not simply\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"meme--text bottom\",\n        children: \"Walk into Mordor\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 5\n  }, this);\n};\n_s(Meme, \"PIsWQbF9bdziZP98VE+6lnRRcNo=\");\n_c = Meme;\nexport default Meme;\nvar _c;\n$RefreshReg$(_c, \"Meme\");","map":{"version":3,"names":["React","useState","MemesData","jsxDEV","_jsxDEV","Meme","_s","meme","setMeme","topText","bottomText","randomImage","allMemeImages","setAllMemeImages","getMemeImage","event","name","value","target","memesArray","data","memes","randNum","Math","floor","random","length","url","prevMeme","handleSubmit","preventDefault","className","children","onSubmit","type","onChange","placeholder","fileName","_jsxFileName","lineNumber","columnNumber","onClick","src","alt","_c","$RefreshReg$"],"sources":["C:/Users/win-7h/Desktop/Scrimba/Meme Generator/01-starting-setup/src/Components/Meme.js"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport MemesData from \"../MemesData\";\r\n\r\n// * Challenge: Update our state to save the meme-related\r\n// * data as an object called `meme`. It should have the\r\n// * following 3 properties:\r\n// * topText, bottomText, randomImage.\r\n// *\r\n// * The 2 text states can default to empty strings for now,\r\n// * amd randomImage should default to \"http://i.imgflip.com/1bij.jpg\"\r\n// *\r\n// * Next, create a new state variable called `allMemeImages`\r\n// * which will default to `memesData`, which we imported above\r\n// *\r\n// * Lastly, update the `getMemeImage` function and the markup\r\n// * to reflect our newly reformed state object and array in the\r\n// * correct way.\r\n// */\r\n\r\n/**\r\n * Challenge:\r\n * 1. Set up the text inputs to save to\r\n *    the `topText` and `bottomText` state variables.\r\n * 2. Replace the hard-coded text on the image with\r\n *    the text being saved to state.\r\n */\r\n\r\nconst Meme = () => {\r\n  const [meme, setMeme] = useState({\r\n    topText: \"\",\r\n    bottomText: \"\",\r\n    randomImage: \"http://i.imgflip.com/1bij.jpg\",\r\n  });\r\n\r\n  const [allMemeImages, setAllMemeImages] = useState(MemesData);\r\n\r\n  // function handleChange(event) {\r\n  //   const { name, value } = event.target;\r\n  //   setMeme((prevState) => ({\r\n  //     ...prevState,\r\n  //     [name]: value,\r\n  //   }));\r\n  // }\r\n\r\n  function getMemeImage(event) {\r\n    const { name, value } = event.target;\r\n    const memesArray = allMemeImages.data.memes;\r\n    const randNum = Math.floor(Math.random() * memesArray.length);\r\n    const url = memesArray[randNum].url;\r\n    setMeme((prevMeme) => ({\r\n      ...prevMeme,\r\n      [name]: value,\r\n      randomImage: url,\r\n    }));\r\n  }\r\n\r\n  function handleSubmit(event) {\r\n    event.preventDefault();\r\n  }\r\n\r\n  return (\r\n    <main className=\"meme-container\">\r\n      <form className=\"form\" onSubmit={handleSubmit}>\r\n        <input\r\n          type=\"text\"\r\n          name=\"topText\"\r\n          value={meme.topText}\r\n          onChange={getMemeImage}\r\n          placeholder=\"Top text\"\r\n          className=\"form--input\"\r\n        />\r\n        <input\r\n          type=\"text\"\r\n          name=\"bottomText\"\r\n          value={meme.bottomText}\r\n          onChange={getMemeImage}\r\n          placeholder=\"Bottom text\"\r\n          className=\"form--input\"\r\n        />\r\n        <button onClick={getMemeImage} className=\"form--button\">\r\n          Get a new meme image ðŸ–¼\r\n        </button>\r\n      </form>\r\n\r\n      <div className=\"meme\">\r\n        <img className=\"meme--image\" src={meme.randomImage} alt=\"\"></img>\r\n        <h2 className=\"meme--text top\">One does not simply</h2>\r\n        <h2 className=\"meme--text bottom\">Walk into Mordor</h2>\r\n      </div>\r\n    </main>\r\n  );\r\n};\r\n\r\nexport default Meme;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}