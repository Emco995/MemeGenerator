{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\win-7h\\\\Desktop\\\\Scrimba\\\\Meme Generator\\\\01-starting-setup\\\\src\\\\Components\\\\Meme.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport MemesData from \"../MemesData\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Meme = () => {\n  _s();\n  const [meme, setMeme] = useState({\n    topText: \"\",\n    bottomText: \"\",\n    randomImage: \"http://i.imgflip.com/1bij.jpg\"\n  });\n  const [allMemes, setAllMemes] = useState(MemesData);\n  useEffect(() => {\n    async function getMemes() {\n      const res = await fetch(\"https://api.imgflip.com/get_memes\");\n      const data = await res.json();\n      setAllMemes(data.data.memes);\n    }\n    getMemes();\n  }, []);\n  function getMemeImage() {\n    // const memesArray = allMemes.data.memes;\n    const randNum = Math.floor(Math.random() * allMemes.length);\n    const url = allMemes[randNum].url;\n    setMeme(prevMeme => ({\n      ...prevMeme,\n      randomImage: url\n    }));\n  }\n  function handleChange(event) {\n    const {\n      name,\n      value\n    } = event.target;\n    setMeme(prevState => ({\n      ...prevState,\n      [name]: value\n    }));\n  }\n  return /*#__PURE__*/_jsxDEV(\"main\", {\n    className: \"meme-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        name: \"topText\",\n        value: meme.topText,\n        onChange: handleChange,\n        placeholder: \"Top text\",\n        className: \"form--input\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        name: \"bottomText\",\n        value: meme.bottomText,\n        onChange: handleChange,\n        placeholder: \"Bottom text\",\n        className: \"form--input\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: getMemeImage,\n        className: \"form--button\",\n        children: \"Get a new meme image \\uD83D\\uDDBC\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n        children: JSON.stringify(setAllMemes, null, 2)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"meme\",\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        className: \"meme--image\",\n        src: meme.randomImage,\n        alt: \"\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"meme--text top\",\n        children: meme.topText\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"meme--text bottom\",\n        children: meme.bottomText\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 5\n  }, this);\n};\n_s(Meme, \"hZ4Z/RtLf5rcAhzynpc9mImH1WA=\");\n_c = Meme;\nexport default Meme;\nvar _c;\n$RefreshReg$(_c, \"Meme\");","map":{"version":3,"names":["React","useState","useEffect","MemesData","jsxDEV","_jsxDEV","Meme","_s","meme","setMeme","topText","bottomText","randomImage","allMemes","setAllMemes","getMemes","res","fetch","data","json","memes","getMemeImage","randNum","Math","floor","random","length","url","prevMeme","handleChange","event","name","value","target","prevState","className","children","type","onChange","placeholder","fileName","_jsxFileName","lineNumber","columnNumber","onClick","JSON","stringify","src","alt","_c","$RefreshReg$"],"sources":["C:/Users/win-7h/Desktop/Scrimba/Meme Generator/01-starting-setup/src/Components/Meme.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport MemesData from \"../MemesData\";\r\n\r\nconst Meme = () => {\r\n  const [meme, setMeme] = useState({\r\n    topText: \"\",\r\n    bottomText: \"\",\r\n    randomImage: \"http://i.imgflip.com/1bij.jpg\",\r\n  });\r\n\r\n  const [allMemes, setAllMemes] = useState(MemesData);\r\n\r\n  useEffect(() => {\r\n    async function getMemes() {\r\n      const res = await fetch(\"https://api.imgflip.com/get_memes\");\r\n      const data = await res.json();\r\n      setAllMemes(data.data.memes);\r\n    }\r\n    getMemes();\r\n  }, []);\r\n\r\n  function getMemeImage() {\r\n    // const memesArray = allMemes.data.memes;\r\n    const randNum = Math.floor(Math.random() * allMemes.length);\r\n    const url = allMemes[randNum].url;\r\n    setMeme((prevMeme) => ({\r\n      ...prevMeme,\r\n      randomImage: url,\r\n    }));\r\n  }\r\n\r\n  function handleChange(event) {\r\n    const { name, value } = event.target;\r\n    setMeme((prevState) => ({\r\n      ...prevState,\r\n      [name]: value,\r\n    }));\r\n  }\r\n\r\n  return (\r\n    <main className=\"meme-container\">\r\n      <div className=\"form\">\r\n        <input\r\n          type=\"text\"\r\n          name=\"topText\"\r\n          value={meme.topText}\r\n          onChange={handleChange}\r\n          placeholder=\"Top text\"\r\n          className=\"form--input\"\r\n        />\r\n        <input\r\n          type=\"text\"\r\n          name=\"bottomText\"\r\n          value={meme.bottomText}\r\n          onChange={handleChange}\r\n          placeholder=\"Bottom text\"\r\n          className=\"form--input\"\r\n        />\r\n        <button onClick={getMemeImage} className=\"form--button\">\r\n          Get a new meme image ðŸ–¼\r\n        </button>\r\n        <pre>{JSON.stringify(setAllMemes, null, 2)}</pre>\r\n      </div>\r\n\r\n      <div className=\"meme\">\r\n        <img className=\"meme--image\" src={meme.randomImage} alt=\"\"></img>\r\n        <h2 className=\"meme--text top\">{meme.topText}</h2>\r\n        <h2 className=\"meme--text bottom\">{meme.bottomText}</h2>\r\n      </div>\r\n    </main>\r\n  );\r\n};\r\n\r\nexport default Meme;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}